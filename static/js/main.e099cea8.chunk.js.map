{"version":3,"sources":["fonts/Starjedi.ttf","components/Header.js","queries/filmQuery.js","queries/peopleQuery.js","queries/planetsQuery.js","queries/speciesQuery.js","components/categories/Movies.js","components/categories/People.js","components/categories/Planets.js","components/categories/Species.js","util/queryResolver.js","components/Loading.js","components/Display.js","components/StarLightButton.js","App.js","index.js"],"names":["module","exports","styles","headerStyle","background","color","imageStyle","height","margin","cropContainerStyle","width","overflow","border","Header","style","src","alt","ALL_FILMS","gql","ALL_PEOPLE","ALL_PLANETS","ALL_SPECIES","Movies","data","console","log","allFilms","films","map","curr","idx","key","id","movieItem","titleStyle","title","episodeID","releaseDate","director","producerStyle","producers","producer","borderBottom","padding","fontSize","fontFamily","borderRadius","display","People","allPeople","people","menuItem","headerStyles","name","gender","eyeColorDisplay","eyeColor","colorStyles","colorStyler","CSS_STYLE","Option","checkColorValidity","Number","parseInt","Math","random","Planets","allPlanets","planets","menuItems","diameter","population","rotationPeriod","climates","climate","terrains","terrain","Species","allSpecies","species","designation","classification","language","eyeColorStyles","eyeColors","justifyContent","colors","_querySelector","value","query","loadingStyles","Loading","dataInteration","type","typeResolver","displayStyle","flexWrap","Display","props","error","loading","defaultButtonStyle","boxShadow","fontWeight","outline","onHoverButtonStyle","cursor","StarLightButton","useState","currentStyle","setCurrentStyle","onClick","e","target","handleClick","onMouseOver","onMouseOut","mainScreenStyles","flexDirection","menuStyles","marginTop","menuItemsStyles","App","setQuery","useLazyQuery","runQuery","setType","queryResolver","useEffect","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e099cea8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header style={styles.headerStyle}>\n      <div style={styles.cropContainerStyle}>\n        <img\n          style={styles.imageStyle}\n          src=\"https://fontmeme.com/permalink/200108/b0db4ffa47b7c1754a977d389ee99a76.png\"\n          alt=\"star-wars-font\"\n          border=\"0\"\n        />\n      </div>\n    </header>\n  );\n};\n\nconst styles = {\n  headerStyle: {\n    background: \"rgba(0, 0, 0, 0.8)\",\n    color: \"color\"\n  },\n  imageStyle: {\n    height: \"100px\",\n    margin: \"-29px 0px 0px -28px\"\n  },\n  cropContainerStyle: {\n    width: \"356px\",\n    height: \"43px\",\n    overflow: \"hidden\",\n    border: \"5px solid black\",\n    margin: \"0 auto\"\n  }\n};\n\nexport default Header;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_FILMS = gql`\n  {\n    allFilms {\n      films {\n        id\n        title\n        episodeID\n        releaseDate\n        created\n        openingCrawl\n        producers\n        director\n      }\n    }\n  }\n`;","import { gql } from \"@apollo/client\";\n\nexport const ALL_PEOPLE = gql`\n  {\n  allPeople {\n    people {\n      id\n      name\n      eyeColor\n      hairColor\n      skinColor\n      height\n      gender\n    }\n  }\n}\n`;","import { gql } from \"@apollo/client\";\n\nexport const ALL_PLANETS = gql`\n  {\n    allPlanets {\n      planets {\n        id\n        name\n        diameter\n        population\n        surfaceWater\n        rotationPeriod\n        climates\n        orbitalPeriod\n        terrains\n      }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_SPECIES = gql`\n  {\n  allSpecies {\n    species {\n          id\n          name\n          classification\n          designation\n          averageHeight\n          averageLifespan\n          eyeColors\n          hairColors\n          skinColors\n          language\n          homeworld {\n            name\n            \n          }\n        }\n  }\n}\n`;","import React from \"react\";\n\nconst Movies = ({ data }) => {\n  console.log(data);\n  return (\n    <>\n      {data &&\n        data.allFilms &&\n        data.allFilms.films.map((curr, idx) => (\n          <div key={curr.id} style={styles.movieItem}>\n            <div style={styles.titleStyle}>\n              {curr.title}\n            </div>\n            <div>\n              <div>\n                Episdoe ID: {curr.episodeID}\n              </div>\n              <div>\n                Release Date: {curr.releaseDate}\n              </div>\n              <div>\n                Director: {curr.director}\n              </div>\n              <div>\n                <div style={styles.producerStyle}>\n                Producers:\n                </div>\n              {curr.producers.map((producer, idx) => {\n                  return <div key={idx}>{producer}</div>\n                })}\n              </div>\n            </div>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  titleStyle: {\n    borderBottom: \"1px solid black\"\n  },\n  movieItem: {\n    border: \"10px solid #27c2ac\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontSize: \"24px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#45d2be\",\n    borderRadius: \"10px\",\n    color: \"black\"\n  },\n  producerStyle: {\n    borderBottom: \"4px solid #5f75dd\",\n    display: \"inline-block\",\n    padding: \"10px\"\n  }\n};\n\nexport { Movies };\n","import React from \"react\";\n\nconst People = ({ data }) => {\n  console.log(data);\n  return (\n    <>\n      {data &&\n        data.allPeople &&\n        data.allPeople.people.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItem}>\n            <div style={styles.headerStyles}>{curr.name}</div>\n            <div>Gender: {curr.gender}</div>\n            <div>Height: {curr.height} cm</div>\n            <div style={{display: \"flex\"}}><div>Eye Color: </div>{eyeColorDisplay(curr.eyeColor)}</div>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItem: {\n    border: \"10px solid #0c0b53\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#161555\",\n    borderRadius: \"10px\"\n  },\n  headerStyles: {\n    fontSize: \"24px\",\n    borderBottom: \"3px solid #6c55c7\"\n  },\n  colorStyles: {\n    height: \"15px\",\n    width: \"15px\",\n    borderRadius: \"50%\",\n    padding: \"5px\",\n    margin: \"2px\",\n  }\n};\n\nconst checkColorValidity = color => {\n  let CSS_STYLE = new Option().style;\n  CSS_STYLE.color = color;\n  return CSS_STYLE.color === color;\n};\n\nconst colorStyler = color => {\n  return {\n    ...styles.colorStyles,\n    background: color\n  };\n};\n\nconst eyeColorDisplay = color => {\n  return color === \"n/a\" || color[0] === \"unknown\" ? (\n    \"N/A\"\n  ) : checkColorValidity(color) === true ? (\n    <div\n      style={colorStyler(color)}\n      key={color + Number.parseInt(Math.random() * 10000000)}\n    ></div>\n  ) : null;\n};\n\nexport { People };\n","import React from \"react\";\n\nconst Planets = ({ data }) => {\n  console.log(data)\n  return (\n    <>\n      {data && data.allPlanets &&\n        data.allPlanets.planets.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItems}>\n            <div style={styles.headerStyles}>{curr.name}</div>\n            <div>Diameter: {curr.diameter}</div>\n            <div>Population: {curr.population}</div>\n            <div>Rotation Period: {curr.rotationPeriod}</div>\n            <div>\n              Climates: \n              {curr.climates.map((climate, idx) => {\n                return <span key={idx}> {climate} | </span>\n              })}\n            </div>\n            <div>\n              Terrains: \n              {curr.terrains.map((terrain, idx) => {\n                return <span key={idx}>{terrain} | </span>\n              })}\n            </div>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItems: {\n    border: \"10px solid #552f7b\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"rebeccapurple\",\n    borderRadius: \"10px\"\n  },\n  headerStyles: {\n    fontSize: \"24px\",\n    borderBottom: \"3px solid #6c55c7\"\n  },\n}\n\nexport { Planets };\n","import React from \"react\";\n\nconst Species = ({ data }) => {\n  console.log(data);\n  return (\n    <>\n      {data &&\n        data.allSpecies &&\n        data.allSpecies.species.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItems}>\n            <div style={styles.headerStyles}>{curr.name}</div>\n            <div>Designation: {curr.designation}</div>\n            <div>Classification: {curr.classification}</div>\n            <div>Language: {curr.language}</div>\n            <div>Eye Color:</div>\n            <div style={styles.eyeColorStyles}>\n              {eyeColorDisplay(curr.eyeColors)}\n            </div>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItems: {\n    border: \"10px solid #d1471c\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#FF5722\",\n    borderRadius: \"10px\",\n    color: \"black\"\n  },\n  headerStyles: {\n    fontSize: \"24px\",\n    borderBottom: \"3px solid #c78455\"\n  },\n  eyeColorStyles: {\n    background: \"white\",\n    display: \"flex\",\n    justifyContent: \"space-evenly\"\n  },\n  colorStyles: {\n    height: \"20px\",\n    width: \"20px\",\n    borderRadius: \"50%\",\n    padding: \"5px\",\n    margin: \"2px\"\n  }\n};\n\nconst checkColorValidity = color => {\n  let CSS_STYLE = new Option().style;\n  CSS_STYLE.color = color;\n  return CSS_STYLE.color === color;\n};\n\nconst colorStyler = color => {\n  return {\n    ...styles.colorStyles,\n    background: color\n  };\n};\n\nconst eyeColorDisplay = colors => {\n  return (colors[0] === \"n/a\" || colors[0] === \"unknown\")\n    ? \"N/A\"\n    : colors.map((color, idx) => {\n        return checkColorValidity(color) === true ? (\n          <div style={colorStyler(color)} key={idx+color+Number.parseInt(Math.random()*10000000)}></div>\n        ) : null;\n      });\n};\n\nexport { Species };\n","import * as query from \"../queries\";\nimport React from \"react\";\nimport { Movies, People, Planets, Species } from \"../components/categories\";\n\nexport const queryResolver = id => {\n  return id ? _querySelector(id) : null;\n};\n\nconst _querySelector = value => {\n  switch (value) {\n    case \"movies\":\n      return query.ALL_FILMS;\n    case \"people\":\n      return query.ALL_PEOPLE;\n    case \"planets\":\n      return query.ALL_PLANETS;\n    case \"species\":\n      return query.ALL_SPECIES;\n    default:\n      return null;\n  }\n};\n\nexport const typeResolver = (value, data) => {\n  switch (value) {\n    case \"movies\":\n      return <Movies data={data} />;\n    case \"people\":\n      return <People data={data} />;\n    case \"planets\":\n      return <Planets data={data} />;\n    case \"species\":\n      return <Species data={data} />;\n    default:\n      return null;\n  }\n};\n","import React from 'react'\n\nconst Loading = () => {\n    return (\n        <div style={styles.loadingStyles}>\n            Loading....\n        </div>\n    )\n}\n\nconst styles = {\n    loadingStyles: {\n        color: \"white\",\n        fontSize: \"96px\",\n        margin: \"300px auto\",\n        fontFamily: \"starWarsFont\"\n    }\n}\n\nexport default Loading\n","import React from \"react\";\nimport { typeResolver } from \"../util/queryResolver\";\nimport Loading from \"./Loading\";\n\nconst dataInteration = (data, type) => {\n  return data ? typeResolver(type, data) : null;\n};\n\nconst Display = props => {\n  if (props.error) return <div>Error: {props.error}</div>;\n  if (props.loading) return <Loading />;\n  if(props.data)  {\n      return (\n        <div style={styles.displayStyle}>\n          {dataInteration(props.data, props.type)}\n        </div>\n      );\n  } else {\n      return null;\n  }\n};\n\nconst styles = {\n  displayStyle: {\n    color: \"white\",\n    display: \"flex\", \n    flexWrap: \"wrap\",\n    margin: \"60px 50px\"\n  }\n}\n\nexport default Display;\n","import React, { useState } from \"react\";\n\nconst StarLightButton = (props) => {\n  const [currentStyle, setCurrentStyle] = useState(styles.defaultButtonStyle);\n\n\n  const onButtonHover = () => {\n    setCurrentStyle(styles.onHoverButtonStyle);\n  }\n\n  const onButtonOut = () => {\n    setCurrentStyle(styles.defaultButtonStyle);\n  }\n\n  const handleClick = (e) => {\n    if(props.onClick) {\n      props.onClick(e.target.id)\n    }\n  }\n\n  return (\n    <div>\n      <button id={props.id} onClick={(e) => handleClick(e)} style={currentStyle} onMouseOver={() => onButtonHover()} onMouseOut= {() => onButtonOut()}>\n        {props.name ? props.name : \"Star Wars Light\"}\n      </button>\n    </div>\n  );\n};\n\nconst styles = {\n  defaultButtonStyle: {\n    height: \"50px\",\n    background: \"rgb(231, 236, 242)\",\n    color: \"black\",\n    boxShadow: \"0px 0px 36px 12px #277edd\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\",\n    outline: \"none\"\n  },\n  onHoverButtonStyle: {\n    height: \"50px\",\n    background: \"rgb(253, 238, 231)\",\n    color: \"black\",\n    boxShadow: \"00px 0px 36px 12px #ef3125\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsJholFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n    outline: \"none\"\n  }\n}\n\nexport default StarLightButton;\n","import React, {useState, useEffect} from \"react\";\nimport { useLazyQuery } from \"@apollo/client\"\nimport Header from \"./components/Header\";\nimport Display from \"./components/Display\";\nimport StarLightButton from \"./components/StarLightButton\";\nimport {queryResolver} from \"./util/queryResolver\";\n\nconst App = () => {\n  const [query, setQuery] = useState(null);\n  const [runQuery, {loading, error, data}] = useLazyQuery(query);\n  const [type, setType] = useState(\"movies\");\n\n  const handleClick = (id) => {\n    setType(id);\n    setQuery(queryResolver(id));\n  }\n\n  useEffect(() => {\n    if(query) {\n      runQuery(query);\n    }\n  }, [query, runQuery])\n\n\n  return (\n    <div>\n      <Header />\n      <div style={styles.mainScreenStyles}>\n        <div style={styles.menuStyles}>\n          <StarLightButton name=\"Movies\" onClick={handleClick} id=\"movies\"/>\n          <StarLightButton name=\"Species\" onClick={handleClick} id=\"species\"/>\n          <StarLightButton name=\"People\" onClick={handleClick} id=\"people\"/>\n          <StarLightButton name=\"Planets\" onClick={handleClick} id=\"planets\"/>\n        </div>\n        <>\n          <Display loading={loading} error={error} data={data} type={type}/>\n        </>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  mainScreenStyles: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  menuStyles: {\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    marginTop: \"50px\"\n  },\n  menuItemsStyles: {\n    color: \"white\"\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts/Starjedi.ttf\";\nimport App from \"./App\";\nimport {ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    // uri: \"https://swapi-graphql-ramtoo.herokuapp.com/\",\n    uri: \"https://swapi-graphql.netlify.com/.netlify/functions/index\"\n  })\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
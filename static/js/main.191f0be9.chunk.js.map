{"version":3,"sources":["fonts/Starjedi.ttf","components/Header.js","queries/filmQuery.js","queries/peopleQuery.js","queries/planetsQuery.js","queries/speciesQuery.js","components/categories/Movies.js","components/categories/People.js","components/categories/Planets.js","components/categories/Species.js","util/queryResolver.js","components/Loading.js","components/Display.js","components/StarLightButton.js","App.js","index.js"],"names":["module","exports","styles","headerStyle","background","color","imageStyle","height","margin","cropContainerStyle","width","overflow","border","Header","style","src","alt","ALL_FILMS","gql","ALL_PEOPLE","ALL_PLANETS","ALL_SPECIES","Movies","data","console","log","allFilms","films","map","curr","idx","key","id","movieItem","titleStyle","title","episodeID","releaseDate","director","producers","producer","borderBottom","padding","fontSize","fontFamily","borderRadius","People","allPeople","people","menuItem","name","Planets","allPlanets","planets","menuItems","Species","allSpecies","species","designation","_querySelector","value","query","loadingStyles","Loading","dataInteration","type","typeResolver","displayStyle","display","flexWrap","Display","props","error","loading","defaultButtonStyle","boxShadow","fontWeight","onHoverButtonStyle","cursor","StarLightButton","useState","currentStyle","setCurrentStyle","onClick","e","target","handleClick","onMouseOver","onMouseOut","mainScreenStyles","flexDirection","menuStyles","justifyContent","marginTop","menuItemsStyles","App","setQuery","useLazyQuery","runQuery","setType","queryResolver","useEffect","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.191f0be9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header style={styles.headerStyle}>\n      <div style={styles.cropContainerStyle}>\n        <img\n          style={styles.imageStyle}\n          src=\"https://fontmeme.com/permalink/200108/b0db4ffa47b7c1754a977d389ee99a76.png\"\n          alt=\"star-wars-font\"\n          border=\"0\"\n        />\n      </div>\n    </header>\n  );\n};\n\nconst styles = {\n  headerStyle: {\n    background: \"rgba(0, 0, 0, 0.8)\",\n    color: \"color\"\n  },\n  imageStyle: {\n    height: \"100px\",\n    margin: \"-29px 0px 0px -28px\"\n  },\n  cropContainerStyle: {\n    width: \"356px\",\n    height: \"43px\",\n    overflow: \"hidden\",\n    border: \"5px solid black\",\n    margin: \"0 auto\"\n  }\n};\n\nexport default Header;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_FILMS = gql`\n  {\n    allFilms {\n      films {\n        id\n        title\n        episodeID\n        releaseDate\n        created\n        openingCrawl\n        producers\n        director\n      }\n    }\n  }\n`;","import { gql } from \"@apollo/client\";\n\nexport const ALL_PEOPLE = gql`\n  {\n  allPeople {\n    people {\n      id\n      name\n    }\n  }\n}\n`;","import { gql } from \"@apollo/client\";\n\nexport const ALL_PLANETS = gql`\n  {\n    allPlanets {\n      planets {\n        id\n        name\n      }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_SPECIES = gql`\n  {\n  allSpecies {\n    species {\n          id\n          name\n          classification\n          designation\n          averageHeight\n          averageLifespan\n          eyeColors\n          hairColors\n          skinColors\n          language\n          homeworld {\n            name\n            \n          }\n        }\n  }\n}\n`;","import React from \"react\";\n\nconst Movies = ({ data }) => {\n  console.log(data);\n  return (\n    <>\n      {data && data.allFilms &&\n        data.allFilms.films.map((curr, idx) => (\n          <div key={curr.id} style={styles.movieItem }>\n            <div style={styles.titleStyle}>\n              {curr.title}\n            </div>\n            <div>\n              {curr.episodeID}\n              {curr.releaseDate}\n              {curr.director}\n              {curr.producers.map((producer,idx) => {\n                return <div key={idx}>{producer}</div>\n              })}\n            </div>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  titleStyle: {\n    borderBottom: \"1px solid black\"\n  },\n  movieItem: {\n    border: \"10px solid #27c2ac\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontSize: \"24px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#45d2be\",\n    borderRadius: \"10px\",\n    color: \"black\"\n  }\n};\n\nexport { Movies };\n","import React from \"react\";\n\nconst People = ({ data }) => {\n  return (\n    <>\n      {data && data.allPeople &&\n        data.allPeople.people.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItem}>\n            <p>{curr.name}</p>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItem: {\n    border: \"10px solid #0c0b53\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#161555\",\n    borderRadius: \"10px\"\n  }\n}\n\nexport { People };\n","import React from \"react\";\n\nconst Planets = ({ data }) => {\n  return (\n    <>\n      {data && data.allPlanets &&\n        data.allPlanets.planets.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItems}>\n            <p>{curr.name}</p>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItems: {\n    border: \"10px solid #552f7b\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"rebeccapurple\",\n    borderRadius: \"10px\"\n  }\n}\n\nexport { Planets };\n","import React from \"react\";\n\nconst Species = ({ data }) => {\n  return (\n    <>\n      {data &&\n        data.allSpecies &&\n        data.allSpecies.species.map((curr, idx) => (\n          <div key={curr.id} style={styles.menuItems}>\n            <p>\n              {curr.name}: {curr.designation}\n            </p>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst styles = {\n  menuItems: {\n    border: \"10px solid #d1471c\",\n    padding: \"10px 20px\",\n    margin: \"10px\",\n    fontFamily: \"starWarsFont\",\n    background: \"#FF5722\",\n    borderRadius: \"10px\",\n    color: \"black\"\n  }\n}\n\nexport { Species };\n","import * as query from \"../queries\";\nimport React from \"react\";\nimport { Movies, People, Planets, Species } from \"../components/categories\";\n\nexport const queryResolver = id => {\n  return id ? _querySelector(id) : null;\n};\n\nconst _querySelector = value => {\n  switch (value) {\n    case \"movies\":\n      return query.ALL_FILMS;\n    case \"people\":\n      return query.ALL_PEOPLE;\n    case \"planets\":\n      return query.ALL_PLANETS;\n    case \"species\":\n      return query.ALL_SPECIES;\n    default:\n      return null;\n  }\n};\n\nexport const typeResolver = (value, data) => {\n  switch (value) {\n    case \"movies\":\n      return <Movies data={data} />;\n    case \"people\":\n      return <People data={data} />;\n    case \"planets\":\n      return <Planets data={data} />;\n    case \"species\":\n      return <Species data={data} />;\n    default:\n      return null;\n  }\n};\n","import React from 'react'\n\nconst Loading = () => {\n    return (\n        <div style={styles.loadingStyles}>\n            Loading....\n        </div>\n    )\n}\n\nconst styles = {\n    loadingStyles: {\n        color: \"white\",\n        fontSize: \"96px\",\n        margin: \"300px auto\",\n        fontFamily: \"starWarsFont\"\n    }\n}\n\nexport default Loading\n","import React from \"react\";\nimport { typeResolver } from \"../util/queryResolver\";\nimport Loading from \"./Loading\";\n\nconst dataInteration = (data, type) => {\n  return data ? typeResolver(type, data) : null;\n};\n\nconst Display = props => {\n  if (props.error) return <div>Error: {props.error}</div>;\n  if (props.loading) return <Loading />;\n  if(props.data)  {\n      return (\n        <div style={styles.displayStyle}>\n          {dataInteration(props.data, props.type)}\n        </div>\n      );\n  } else {\n      return null;\n  }\n};\n\nconst styles = {\n  displayStyle: {\n    color: \"white\",\n    display: \"flex\", \n    flexWrap: \"wrap\",\n    margin: \"60px 50px\"\n  }\n}\n\nexport default Display;\n","import React, { useState } from \"react\";\n\nconst StarLightButton = (props) => {\n  const [currentStyle, setCurrentStyle] = useState(styles.defaultButtonStyle);\n\n\n  const onButtonHover = () => {\n    setCurrentStyle(styles.onHoverButtonStyle);\n  }\n\n  const onButtonOut = () => {\n    setCurrentStyle(styles.defaultButtonStyle);\n  }\n\n  const handleClick = (e) => {\n    if(props.onClick) {\n      props.onClick(e.target.id)\n    }\n  }\n\n  return (\n    <div>\n      <button id={props.id} onClick={(e) => handleClick(e)} style={currentStyle} onMouseOver={() => onButtonHover()} onMouseOut= {() => onButtonOut()}>\n        {props.name ? props.name : \"Star Wars Light\"}\n      </button>\n    </div>\n  );\n};\n\nconst styles = {\n  defaultButtonStyle: {\n    height: \"50px\",\n    background: \"rgb(231, 236, 242)\",\n    color: \"black\",\n    boxShadow: \"0px 0px 36px 12px #277edd\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\"\n  },\n  onHoverButtonStyle: {\n    height: \"50px\",\n    background: \"rgb(253, 238, 231)\",\n    color: \"black\",\n    boxShadow: \"00px 0px 36px 12px #ef3125\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsJholFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\"\n  }\n}\n\nexport default StarLightButton;\n","import React, {useState, useEffect} from \"react\";\nimport { useLazyQuery } from \"@apollo/client\"\nimport Header from \"./components/Header\";\nimport Display from \"./components/Display\";\nimport StarLightButton from \"./components/StarLightButton\";\nimport {queryResolver} from \"./util/queryResolver\";\n\nconst App = () => {\n  const [query, setQuery] = useState(null);\n  const [runQuery, {loading, error, data}] = useLazyQuery(query);\n  const [type, setType] = useState(\"movies\");\n\n  const handleClick = (id) => {\n    setType(id);\n    setQuery(queryResolver(id));\n  }\n\n  useEffect(() => {\n    if(query) {\n      runQuery(query);\n    }\n  }, [query, runQuery])\n\n\n  return (\n    <div>\n      <Header />\n      <div style={styles.mainScreenStyles}>\n        <div style={styles.menuStyles}>\n          <StarLightButton name=\"Movies\" onClick={handleClick} id=\"movies\"/>\n          <StarLightButton name=\"Species\" onClick={handleClick} id=\"species\"/>\n          <StarLightButton name=\"People\" onClick={handleClick} id=\"people\"/>\n          <StarLightButton name=\"Planets\" onClick={handleClick} id=\"planets\"/>\n        </div>\n        <>\n          <Display loading={loading} error={error} data={data} type={type}/>\n        </>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  mainScreenStyles: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  menuStyles: {\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    marginTop: \"50px\"\n  },\n  menuItemsStyles: {\n    color: \"white\"\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts/Starjedi.ttf\";\nimport App from \"./App\";\nimport {ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    // uri: \"https://swapi-graphql-ramtoo.herokuapp.com/\",\n    uri: \"https://swapi-graphql.netlify.com/.netlify/functions/index\"\n  })\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
{"version":3,"sources":["fonts/Starjedi.ttf","queries/filmQuery.js","components/Movies.js","queries/speciesQuery.js","components/Species.js","queries/peopleQuery.js","components/People.js","queries/planetsQuery.js","components/Planets.js","components/Header.js","components/Display.js","App.js","index.js"],"names":["module","exports","ALL_FILMS","gql","Movies","props","useLazyQuery","getFilms","loading","data","useState","styles","defaultButtonStyle","currentStyle","setCurrentStyle","console","log","onClick","style","onMouseOver","onHoverButtonStyle","onMouseOut","color","menuItemsStyles","allFilms","films","map","curr","idx","key","id","title","episodeID","ALL_SPECIES","buttonStyle","height","width","background","borderRadius","border","menuStyle","Species","getSpecies","allSpecies","species","name","designation","ALL_PEOPLE","People","getPeople","allPeople","people","ALL_PLANETS","Planets","getPlanets","allPlanets","planets","headerStyle","imageStyle","margin","cropContainerStyle","overflow","Header","src","alt","Display","menuStyles","display","justifyContent","marginTop","boxShadow","fontFamily","fontSize","fontWeight","App","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"+MAAAA,EAAOC,QAAU,IAA0B,sC,sUCEpC,IAAMC,EAAYC,YAAH,K,QCyCPC,EAvCA,SAACC,GAAW,IAAD,EACcC,YAAaJ,GAD3B,mBACjBK,EADiB,YACLC,EADK,EACLA,QAASC,EADJ,EACIA,KADJ,EAEgBC,mBAASL,EAAMM,OAAOC,oBAFtC,mBAEjBC,EAFiB,KAEHC,EAFG,KAexB,OADIL,GAAMM,QAAQC,IAAIP,GAEpB,6BACE,4BAAQQ,QAAS,kBAAMV,KAAYW,MAAOL,EAAcM,YAAa,WAXvEL,EAAgBT,EAAMM,OAAOS,qBAWiEC,WAAa,WAP3GP,EAAgBT,EAAMM,OAAOC,sBAO3B,UAGCJ,EAAU,uBAAGU,MAAO,CAACI,MAAO,UAAlB,cAA6C,KACxD,yBAAKJ,MAAOb,EAAMM,OAAOY,iBACtBd,GACGA,EAAKe,SAASC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACtB,yBAAKC,IAAKF,EAAKG,IACb,2BACGH,EAAKI,MADR,KACiBJ,EAAKK,kB,0ZC5B/B,IAAMC,EAAc9B,YAAH,KC2BlBQ,EAAS,CACbuB,YAAa,CACXC,OAAQ,OACRC,MAAO,QACPC,WAAY,0BACZf,MAAO,QACPgB,aAAc,OACdC,OAAQ,OAEVC,UAAW,CACTlB,MAAO,UAIImB,EAvCC,WAAO,IAAD,EACuCnC,YACzD2B,GAFkB,mBACbS,EADa,YAC6BjC,GAD7B,EACCD,QADD,EAC6BC,MAIjD,OACE,6BACE,4BAAQQ,QAAS,kBAAMyB,KAAcxB,MAAOP,EAAOuB,aAAnD,WAGA,yBAAKhB,MAAOP,EAAO6B,WAChB/B,GACCA,EAAKkC,YACLlC,EAAKkC,WAAWC,QAAQlB,KAAI,SAACC,EAAMC,GAAP,OAC1B,yBAAKC,IAAKF,EAAKG,IACb,2BACGH,EAAKkB,KADR,KACgBlB,EAAKmB,oB,8IClB5B,IAAMC,EAAa5C,YAAH,KCyBjBQ,EAAS,CACXuB,YAAa,CACXC,OAAQ,OACRC,MAAO,QACPC,WAAY,0BACZf,MAAO,QACPgB,aAAc,OACdC,OAAQ,OAEVC,UAAW,CACTlB,MAAO,UAIE0B,EArCA,WAAO,IAAD,EACoB1C,YAAayC,GADjC,mBACZE,EADY,YACCzC,EADD,EACCA,QAASC,EADV,EACUA,KAC7B,OAAID,EAAgB,0CAChBC,GAAMM,QAAQC,IAAIP,GAEpB,6BACE,4BAAQQ,QAAS,kBAAMgC,KAAa/B,MAAOP,EAAOuB,aAAlD,UAGA,yBAAKhB,MAAOP,EAAO6B,WAChB/B,GACGA,EAAKyC,UAAUC,OAAOzB,KAAI,SAACC,EAAMC,GAAP,OACxB,yBAAKC,IAAKF,EAAKG,IACb,2BACGH,EAAKkB,c,8JChBjB,IAAMO,EAAcjD,YAAH,KCyBlBQ,EAAS,CACXuB,YAAa,CACXC,OAAQ,OACRC,MAAO,QACPC,WAAY,0BACZf,MAAO,QACPgB,aAAc,OACdC,OAAQ,OAEVC,UAAW,CACTlB,MAAO,UAIE+B,EArCC,WAAO,IAAD,EACoB/C,YAAa8C,GADjC,mBACbE,EADa,YACC9C,EADD,EACCA,QAASC,EADV,EACUA,KAC9B,OAAID,EAAgB,0CAChBC,GAAMM,QAAQC,IAAIP,GAEpB,6BACE,4BAAQQ,QAAS,kBAAMqC,KAAcpC,MAAOP,EAAOuB,aAAnD,WAGA,yBAAKhB,MAAOP,EAAO6B,WAChB/B,GACGA,EAAK8C,WAAWC,QAAQ9B,KAAI,SAACC,EAAMC,GAAP,OAC1B,yBAAKC,IAAKF,EAAKG,IACb,2BACGH,EAAKkB,cCDlBlC,EAAS,CACb8C,YAAa,CACXpB,WAAY,qBACZf,MAAO,SAEToC,WAAY,CACVvB,OAAQ,QACRwB,OAAQ,uBAEVC,mBAAoB,CAClBxB,MAAO,QACPD,OAAQ,OACR0B,SAAU,SACVtB,OAAQ,kBACRoB,OAAQ,WAIGG,EAjCA,WACb,OACE,yBAAK5C,MAAOP,EAAO8C,aACjB,yBAAKvC,MAAOP,EAAOiD,oBACjB,yBACE1C,MAAOP,EAAO+C,WACdK,IAAI,6EACJC,IAAI,iBACJzB,OAAO,SCAF0B,EARC,WACZ,OACI,yBAAK/C,MAAO,CAACI,MAAO,UAApB,2CC4CR,IAAMX,EAAS,CACbuD,WAAY,CACVC,QAAS,OACTC,eAAgB,eAChBC,UAAW,QAEb9C,gBAAiB,CACfD,MAAO,SAETV,mBAAoB,CAClBuB,OAAQ,OACRC,MAAO,QACPC,WAAY,qBACZf,MAAO,QACPgD,UAAW,4BACXhC,aAAc,OACdC,OAAQ,MACRgC,WAAY,mBACZC,SAAU,OACVC,WAAY,QAEdrD,mBAAoB,CAClBe,OAAQ,OACRC,MAAO,QACPC,WAAY,qBACZf,MAAO,QACPgD,UAAW,6BACXhC,aAAc,OACdC,OAAQ,MACRgC,WAAY,mBACZC,SAAU,OACVC,WAAY,SAIDC,EAtDf,WACE,OACE,6BACE,6BACE,kBAAC,EAAD,OAEF,yBAAKxD,MAAOP,EAAOuD,YACjB,kBAAC,EAAD,CAAQvD,OAAQA,IAChB,kBAAC,EAAD,CAASA,OAAQA,IACjB,kBAAC,EAAD,CAAQA,OAAQA,IAChB,kBAAC,EAAD,CAASA,OAAQA,KAEnB,6BACE,kBAAC,EAAD,S,gCCnCFgE,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACjBC,IAAK,kDAKTC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAgBT,OAAQA,GACtB,kBAAC,EAAD,OAEFU,SAASC,eAAe,W","file":"static/js/main.5564a73b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","import { gql } from \"@apollo/client\";\n\nexport const ALL_FILMS = gql`\n  {\n    allFilms {\n      films {\n        id\n        title\n        episodeID\n        releaseDate\n        created\n      }\n    }\n  }\n`;","import { ALL_FILMS } from \"../queries/filmQuery\";\nimport React, { useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst Movies = (props) => {\n  const [getFilms, { loading, data }] = useLazyQuery(ALL_FILMS);\n  const [currentStyle, setCurrentStyle] = useState(props.styles.defaultButtonStyle);\n\n\n  const onButtonHover = () => {\n    setCurrentStyle(props.styles.onHoverButtonStyle);\n  }\n\n  const onButtonOut = () => {\n    setCurrentStyle(props.styles.defaultButtonStyle);\n  }\n\n  // if (loading) return <p>Loading...</p>;\n  if (data) console.log(data);\n  return (\n    <div>\n      <button onClick={() => getFilms()} style={currentStyle} onMouseOver={() => onButtonHover()} onMouseOut= {() => onButtonOut()}>\n        Movies\n      </button>\n      {loading ? <p style={{color: \"white\"}}>Loading...</p> : null}\n      <div style={props.styles.menuItemsStyles}>\n        {data &&\n            data.allFilms.films.map((curr, idx) => (\n              <div key={curr.id}>\n                <p>\n                  {curr.title}: {curr.episodeID}\n                </p>\n              </div>\n            ))}\n      </div>\n    </div>\n  );\n};\n\n/* const styles = {\n    ...props.styles\n  }; */\n\nexport default Movies;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_SPECIES = gql`\n  {\n  allSpecies {\n    species {\n          id\n          name\n          classification\n          designation\n          averageHeight\n          averageLifespan\n          eyeColors\n          hairColors\n          skinColors\n          language\n          homeworld {\n            name\n            \n          }\n        }\n  }\n}\n`;","import React, { useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { ALL_SPECIES } from \"../queries/speciesQuery\";\n\nconst Species = () => {\n  const [getSpecies, { loading: getSpeciesLoading, data }] = useLazyQuery(\n    ALL_SPECIES\n  );\n\n  return (\n    <div>\n      <button onClick={() => getSpecies()} style={styles.buttonStyle}>\n        Species\n      </button>\n      <div style={styles.menuStyle}>\n        {data &&\n          data.allSpecies &&\n          data.allSpecies.species.map((curr, idx) => (\n            <div key={curr.id}>\n              <p>\n                {curr.name}: {curr.designation}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  buttonStyle: {\n    height: \"50px\",\n    width: \"150px\",\n    background: \"rgba(63, 168, 217, 0.5)\",\n    color: \"white\",\n    borderRadius: \"10px\",\n    border: \"0px\"\n  },\n  menuStyle: {\n    color: \"white\"\n  }\n};\n\nexport default Species;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_PEOPLE = gql`\n  {\n  allPeople {\n    people {\n      id\n      name\n    }\n  }\n}\n`;","import { ALL_PEOPLE } from \"../queries/peopleQuery\";\nimport React, { useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst People = () => {\n  const [getPeople, { loading, data }] = useLazyQuery(ALL_PEOPLE);\n  if (loading) return <p>Loading...</p>;\n  if (data) console.log(data);\n  return (\n    <div>\n      <button onClick={() => getPeople()} style={styles.buttonStyle}>\n        People\n      </button>\n      <div style={styles.menuStyle}>\n        {data &&\n            data.allPeople.people.map((curr, idx) => (\n              <div key={curr.id}>\n                <p>\n                  {curr.name}\n                </p>\n              </div>\n            ))}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n    buttonStyle: {\n      height: \"50px\",\n      width: \"150px\",\n      background: \"rgba(63, 168, 217, 0.5)\",\n      color: \"white\",\n      borderRadius: \"10px\",\n      border: \"0px\"\n    },\n    menuStyle: {\n      color: \"white\"\n    }\n  };\n\nexport default People;","import { gql } from \"@apollo/client\";\n\nexport const ALL_PLANETS = gql`\n  {\n    allPlanets {\n      planets {\n        id\n        name\n      }\n    }\n  }\n`;\n","import { ALL_PLANETS } from \"../queries/planetsQuery\";\nimport React, { useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst Planets = () => {\n  const [getPlanets, { loading, data }] = useLazyQuery(ALL_PLANETS);\n  if (loading) return <p>Loading...</p>;\n  if (data) console.log(data);\n  return (\n    <div>\n      <button onClick={() => getPlanets()} style={styles.buttonStyle}>\n        Planets\n      </button>\n      <div style={styles.menuStyle}>\n        {data &&\n            data.allPlanets.planets.map((curr, idx) => (\n              <div key={curr.id}>\n                <p>\n                  {curr.name}\n                </p>\n              </div>\n            ))}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n    buttonStyle: {\n      height: \"50px\",\n      width: \"150px\",\n      background: \"rgba(63, 168, 217, 0.5)\",\n      color: \"white\",\n      borderRadius: \"10px\",\n      border: \"0px\"\n    },\n    menuStyle: {\n      color: \"white\"\n    }\n  };\n\nexport default Planets;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div style={styles.headerStyle}>\n      <div style={styles.cropContainerStyle}>\n        <img\n          style={styles.imageStyle}\n          src=\"https://fontmeme.com/permalink/200108/b0db4ffa47b7c1754a977d389ee99a76.png\"\n          alt=\"star-wars-font\"\n          border=\"0\"\n        />\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  headerStyle: {\n    background: \"rgba(0, 0, 0, 0.8)\",\n    color: \"color\"\n  },\n  imageStyle: {\n    height: \"100px\",\n    margin: \"-29px 0px 0px -28px\"\n  },\n  cropContainerStyle: {\n    width: \"356px\",\n    height: \"43px\",\n    overflow: \"hidden\",\n    border: \"5px solid black\",\n    margin: \"0 auto\"\n  }\n};\n\nexport default Header;\n","import React from 'react'\n\nconst Display = () => {\n    return (\n        <div style={{color: \"white\"}}>\n            Hi I am Display Would display anything\n        </div>\n    )\n}\n\nexport default Display\n","import React from \"react\";\nimport Movies from \"./components/Movies\";\nimport Species from \"./components/Species\";\nimport People from \"./components/People\";\nimport Planets from \"./components/Planets\";\nimport Header from \"./components/Header\";\nimport Display from \"./components/Display\";\n\n// For you dhaval: vanilla fetch works with graphql, this is an example\n/* fetch(\"https://swapi-graphql-ramtoo.herokuapp.com/\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    query: `{\n  allFilms {\n    films {\n      id\n      title\n      episodeID\n      releaseDate\n      created\n    }\n  }\n}`\n  })\n})\n  .then(res => res.json())\n  .then(res => console.log(res.data)); */\n\nfunction App() {\n  return (\n    <div>\n      <div>\n        <Header />\n      </div>\n      <div style={styles.menuStyles}>\n        <Movies styles={styles}/>\n        <Species styles={styles}/>\n        <People styles={styles}/>\n        <Planets styles={styles}/>\n      </div>\n      <div>\n        <Display />\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  menuStyles: {\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    marginTop: \"50px\"\n  },\n  menuItemsStyles: {\n    color: \"white\"\n  },\n  defaultButtonStyle: {\n    height: \"50px\",\n    width: \"150px\",\n    background: \"rgb(231, 236, 242)\",\n    color: \"black\",\n    boxShadow: \"0px 0px 36px 12px #277edd\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsJholFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\"\n  },\n  onHoverButtonStyle: {\n    height: \"50px\",\n    width: \"150px\",\n    background: \"rgb(253, 238, 231)\",\n    color: \"black\",\n    boxShadow: \"00px 0px 36px 12px #ef3125\",\n    borderRadius: \"10px\",\n    border: \"0px\",\n    fontFamily: \"starWarsJholFont\",\n    fontSize: \"24px\",\n    fontWeight: \"bold\"\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts/Starjedi.ttf\";\nimport App from \"./App\";\nimport {ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://swapi-graphql-ramtoo.herokuapp.com/\",\n    // uri: \"https://swapi-graphql.netlify.com/.netlify/functions/index\"\n  })\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}